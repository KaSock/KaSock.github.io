{"title":"扫雷游戏的实现","uid":"95801a56b8faceb6cfed73d9d5b08b74","slug":"Minesweeper","date":"2022-05-02T08:05:08.000Z","updated":"2022-07-01T12:29:15.388Z","comments":true,"path":"api/articles/Minesweeper.json","keywords":null,"cover":"https://minesweeper.online/screen/842730902-hd-32.png","content":"<center>记录一下利用C语言写的扫雷小游戏，小白都能看懂的记录博客</center>\n<center>算是写的第二个小游戏了，第一个是<a href=\"https://github.com/KaSock/Three-Pieces\" target=\"_blank\">三子棋</a>小游戏</center>\n<center>之前写三子棋的时候还没搭建这个博客，所以没来得及记录思路</center>\n<center><b>本文可能会有大量文字和代码块，其次笔者文笔水平也不高，请谨慎观看！</b></center>\n<center><b>\"More haste, less speed\"</b></center>\n\n<hr>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><p>一、创建<code>game.c</code>文件用来存放游戏函数的实现<br>二、创建<code>game.h</code>头文件来声明游戏引用<br>三、创建<code>main.c</code>文件作为游戏运行的入口<br><br><img src=\"/post/Minesweeper/2022-05-02-16-30-47.png\" alt=\"文件\"></p>\n<h2 id=\"游戏逻辑\"><a href=\"#游戏逻辑\" class=\"headerlink\" title=\"游戏逻辑\"></a>游戏逻辑</h2><p>一、扫雷游戏需要<strong>两张棋盘</strong>，所以需要创建两个char类型<strong>二维数组</strong>，一个作为玩家看见的以及用于排查雷信息的棋盘，另一个作为地雷的布置和显示地雷信息的棋盘。<br><br>二、在放置地雷的棋盘设定规则，设定<code>0</code>表示不是雷，<code>1</code>表示雷。<br><br>三、在点击任意坐标后，应判断坐标位置一圈的8个点有多少地雷，但是在边界时可能就会发生<strong>下标越界</strong>，所以在开辟两个数组的时候应该增大一圈，比如游戏棋盘的<code>9*9</code>，那数组就开辟<code>11*11</code>的空间，且扩大一圈的数组元素全为<code>0</code>。<br><br>四、在玩家看见的棋盘中，未揭开的坐标全部由<code>*</code>代替。</p>\n<h2 id=\"游戏实现-9-9扫雷\"><a href=\"#游戏实现-9-9扫雷\" class=\"headerlink\" title=\"游戏实现(9*9扫雷)\"></a>游戏实现(9*9扫雷)</h2><h3 id=\"一、绘制游戏游戏菜单\"><a href=\"#一、绘制游戏游戏菜单\" class=\"headerlink\" title=\"一、绘制游戏游戏菜单\"></a>一、绘制游戏游戏菜单</h3><h4 id=\"1-实现游戏基本运行流程\"><a href=\"#1-实现游戏基本运行流程\" class=\"headerlink\" title=\"1.实现游戏基本运行流程\"></a>1.实现游戏基本运行流程</h4><p><br>创建<code>main</code>函数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int main()\n&#123;\n\tsrand((unsigned int)time(NULL));\n\tint input &#x3D; 0;\n\tdo\n\t&#123;\n\t\tmenu();                 &#x2F;&#x2F;游戏菜单\n\t\tprintf(&quot;请输入&gt;&gt;&quot;);\n\t\tscanf(&quot;%d\\n&quot;, &amp;input);  &#x2F;&#x2F;接收用户输入\n\t\tswitch (input)\n\t\t&#123;\n\t\tcase 1:\n\t\t\tgame();             &#x2F;&#x2F;扫雷游戏\n\t\t\tbreak;\n\t\tcase 0:                 &#x2F;&#x2F;退出循环同时while(0)结束程序运行\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tprintf(&quot;选择错误，重新选择\\n&quot;);   &#x2F;&#x2F;break但while非0继续进入菜单\n\t\t\tbreak;\n\t\t&#125;\n\t&#125; while (input);            &#x2F;&#x2F;游戏的循环进行\n\n\treturn 0;\n&#125;</code></pre>\n\n<h4 id=\"2-绘制游戏菜单\"><a href=\"#2-绘制游戏菜单\" class=\"headerlink\" title=\"2.绘制游戏菜单\"></a>2.绘制游戏菜单</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void menu()\n&#123;\n\tprintf(&quot;*********************\\n&quot;);\n\tprintf(&quot;*****   1.play  *****\\n&quot;);\n\tprintf(&quot;*****   0.exit  *****\\n&quot;);\n\tprintf(&quot;*********************\\n&quot;);\n&#125;</code></pre>\n\n<h3 id=\"二、实现游戏功能\"><a href=\"#二、实现游戏功能\" class=\"headerlink\" title=\"二、实现游戏功能\"></a>二、实现游戏功能</h3><h4 id=\"1-定义棋盘的大小\"><a href=\"#1-定义棋盘的大小\" class=\"headerlink\" title=\"1.定义棋盘的大小\"></a>1.定义棋盘的大小</h4><p><br>在<code>game.h</code>中根据逻辑三定义行和列</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#include&lt;stdio.h&gt;\t\t\t\t&#x2F;&#x2F;在这个.h文件中引用头文件则可以免去每个源文件都引用一遍的麻烦\n#include&lt;stdlib.h&gt;\n#include&lt;time.h&gt;\n\n#define ROW  9\t\t\t\t\t&#x2F;&#x2F;真正的棋盘\n#define COL  9\t\t\t\t\t&#x2F;&#x2F;ROW行 COL列\n\n#define ROWS ROW + 2\t\t\t&#x2F;&#x2F;数组棋盘\n#define COLS COL + 2</code></pre>\n\n<h4 id=\"2-初始化棋盘\"><a href=\"#2-初始化棋盘\" class=\"headerlink\" title=\"2.初始化棋盘\"></a>2.初始化棋盘</h4><p><br>声明并定义<code>InitBoard</code>函数<br>首先理清逻辑，定义这样一个函数，参数需要四个(数组，行，列，设定值)设定值用于设定初始化<code>0</code>和<code>*</code><br><br>然后在game.h中定义函数，在game.c中实现</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void InitBoard(char board[ROWS][COLS], int rows, int cols, char set);\t\t&#x2F;&#x2F;char set 用于设置初始化值</code></pre>\n<center>game.h</center>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void InitBoard(char board[ROWS][COLS], int rows, int cols, char set)\n&#123;\n\tfor (int i &#x3D; 0; i &lt; rows; i++)        &#x2F;&#x2F;遍历循环赋值二维数组\n\t&#123;\n\t\tfor (int j &#x3D; 0; j &lt; cols; j++)\n\t\t&#123;\n\t\t\tboard[i][j] &#x3D; set;\t\t\t  &#x2F;&#x2F;使用set来保证通用性\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n<center>game.c</center>\n\n<h4 id=\"3-显示棋盘\"><a href=\"#3-显示棋盘\" class=\"headerlink\" title=\"3.显示棋盘\"></a>3.显示棋盘</h4><p>定义一个<code>DisplayBoard</code>函数来显示棋盘，然后同样在game.h里面声明</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void DisplayBoard(char board[ROWS][COLS], int row, int col)\n&#123;\n\tprintf(&quot;--------扫雷--------\\n&quot;);\t\t\n\t&#x2F;&#x2F;打印列号\n\tfor (int i &#x3D; 0; i &lt;&#x3D; col; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, i);\n\t&#125;\n\tprintf(&quot;\\n&quot;);\n\tfor (int i &#x3D; 1; i &lt;&#x3D; row; i++)\n\t&#123;\n\t\tprintf(&quot;%d &quot;, i);\t\t\t\t\t\t\t\t&#x2F;&#x2F;打印行号\n\t\tfor (int j &#x3D; 1; j &lt;&#x3D; col; j++)\n\t\t&#123;\n\t\t\tprintf(&quot;%c &quot;, board[i][j]);\t\t\t\t\t&#x2F;&#x2F;打印棋盘\n\t\t&#125;\n\t\tprintf(&quot;\\n&quot;);\n\t&#125;\n&#125;</code></pre>\n\n<h4 id=\"4-设置雷\"><a href=\"#4-设置雷\" class=\"headerlink\" title=\"4.设置雷\"></a>4.设置雷</h4><p>定义<code>SetMine</code>函数用来设置雷，设置一个count为雷数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void SetMine(char mine[ROWS][COLS], int row, int col)\n&#123;\n\tint count &#x3D; EASY_COUNT;\t\t\t&#x2F;&#x2F;也可以用参数的方式设定雷数\n\twhile (count)\n\t&#123;\n\t\t&#x2F;&#x2F;生成随机下标去布置雷\n\t\tint x &#x3D; rand() % row + 1;\n\t\tint y &#x3D; rand() % col + 1;\n\t\tif (mine[x][y] &#x3D;&#x3D; &#39;0&#39;)\t\t&#x2F;&#x2F;判断坐标有无雷\n\t\t&#123;\n\t\t\tmine[x][y] &#x3D; &#39;1&#39;;\n\t\t\tcount--;\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<h4 id=\"5-排查雷\"><a href=\"#5-排查雷\" class=\"headerlink\" title=\"5.排查雷\"></a>5.排查雷</h4><p>定义<code>FindMine</code>函数用来找雷，传入mine数组和show数组进行操作</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)\n&#123;\n\t&#x2F;&#x2F;用户输入想排查的坐标\n\t&#x2F;*检查坐标位置是不是雷\n\t\t1.是雷\t\t游戏结束\n\t\t2.不是雷\t游戏继续 统计坐标附近雷的数量 存储信息到show数组里\n\t*&#x2F;\n\n\tint x &#x3D; 0;\n\tint y &#x3D; 0;\n\tint win &#x3D; 0;\n\n\twhile (win&lt;row*col-EASY_COUNT&gt;)\n\t&#123;\n\t\tprintf(&quot;输入坐标排雷&gt;&gt;&quot;);\n\t\tscanf(&quot;%d%d&quot;, &amp;x, &amp;y);\t\t\t\t&#x2F;&#x2F;x(1-9) y(1-9)\n\n\t\tif (x &gt;&#x3D; 1 &amp;&amp; x &lt;&#x3D; row &amp;&amp; y &gt;&#x3D; 1 &amp;&amp; y &lt;&#x3D; col)\t&#x2F;&#x2F;检测输入合法性\n\t\t&#123;\n\t\t\tif (mine[x][y] &#x3D;&#x3D; &#39;1&#39;)\n\t\t\t&#123;\n\t\t\t\tsystem(&quot;cls&quot;);\n\t\t\t\tprintf(&quot;游戏结束\\n&quot;);\n\t\t\t\tDisplayBoard(mine, row, col);\t\t\t&#x2F;&#x2F;显示结束后的棋盘\n\t\t\t\tprintf(&quot;\\n&quot;);\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t\telse\n\t\t\t&#123;\n\t\t\t\t&#x2F;&#x2F;统计x,y周围雷的数量\n\t\t\t\tint count &#x3D; get_mine_count(mine, x, y);\n\t\t\t\tshow[x][y] &#x3D; count + &#39;0&#39;;\t\t\t\t&#x2F;&#x2F;将count的值放入对应x, y坐标内，int + &#39;0&#39;将整型转为字符型\n\t\t\t\tsystem(&quot;cls&quot;);\n\t\t\t\tDisplayBoard(show, row, col);\t\t\t&#x2F;&#x2F;查看排查情况\n\t\t\t\twin++;\n\t\t\t&#125;\n\t\t&#125;\n\t\telse\n\t\t&#123;\n\t\t\tprintf(&quot;非法坐标，重新输入\\n&quot;);\n\t\t&#125;\n\t&#125;\n\tif (win &#x3D;&#x3D; row * col - EASY_COUNT)\t\t&#x2F;&#x2F;判断游戏是否胜利\n\t&#123;\n\t\tsystem(&quot;cls&quot;);\n\t\tprintf(&quot;\\n游戏胜利&quot;);\n\t\tDisplayBoard(mine, row, col);\n\t&#125;\n&#125;</code></pre>\n<p><br>其中需要定义一个统计雷的函数，思路我写在了注释中</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">static int get_mine_count(char mine[ROWS][COLS], int x, int y)\n&#123;\n\t&#x2F;&#x2F;此函数仅只用于FindMine函数，不用在头文件声明\n\n\t&#x2F;*分析\n\t*\tx-1, y-1\tx-1, y\t x-1,  y+1\n\t* \n\t\tx,\t y-1\tx,   y\t x,    y+1\n\n\t\tx+1  y-1\tx+1, y\t x+1,  y+1\n\t*&#x2F;\n\n\t&#x2F;&#x2F;思路 将附近八个坐标的字符加起来，然后减去8个字符0，得到的就是整型雷的个数\n\treturn\n\t\tmine[x - 1][y] +\n\t\tmine[x - 1][y - 1] +\n\t\tmine[x][y - 1] +\n\t\tmine[x + 1][y - 1] +\n\t\tmine[x + 1][y] +\n\t\tmine[x + 1][y + 1] +\n\t\tmine[x][y + 1] +\n\t\tmine[x - 1][y + 1] - 8 * &#39;0&#39;;\n&#125;</code></pre>\n<h3 id=\"三、拼接游戏功能\"><a href=\"#三、拼接游戏功能\" class=\"headerlink\" title=\"三、拼接游戏功能\"></a>三、拼接游戏功能</h3><p>在main.c中创建<code>game</code>函数用于拼接游戏功能，实现游戏</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void game()\n&#123;\n\tchar mine[ROWS][COLS] &#x3D; &#123;0&#125;;   &#x2F;&#x2F;存放布置的雷的信息\n\tchar show[ROWS][COLS] &#x3D; &#123;0&#125;;   &#x2F;&#x2F;存放排查出雷的信息\n\n\t&#x2F;&#x2F;初始化棋盘\n\tInitBoard(mine, ROWS, COLS, &#39;0&#39;);\n\tInitBoard(show, ROWS, COLS, &#39;*&#39;);\n\n\t&#x2F;&#x2F;打印棋盘\n\tsystem(&quot;cls&quot;);\n\tDisplayBoard(show, ROW, COL);\n\n\t&#x2F;&#x2F;布置雷\n\tSetMine(mine, ROW, COL);\n\n\t&#x2F;&#x2F;排查雷\n\tFindMine(mine, show, ROW, COL);\n&#125;</code></pre>\n<p><code>game.h</code>全部内容</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">#define _CRT_SECURE_NO_WARNINGS 1\n#include&lt;stdio.h&gt;\t\t\t\t&#x2F;&#x2F;在这个.h文件中引用头文件则可以免去每个源文件都引用一遍的麻烦\n#include&lt;stdlib.h&gt;\n#include&lt;time.h&gt;\n\n#define ROW  9\t\t\t&#x2F;&#x2F;真正的棋盘\n#define COL  9\t\t\t&#x2F;&#x2F;ROW行 COL列\n#define EASY_COUNT 10\t&#x2F;&#x2F;简单版本的雷数\n\n#define ROWS ROW + 2\t&#x2F;&#x2F;数组棋盘\n#define COLS COL + 2\n\n&#x2F;&#x2F;初始化棋盘\nvoid InitBoard(char board[ROWS][COLS], int rows, int cols, char set);\t\t&#x2F;&#x2F;char set 用于设置初始化值\n\n&#x2F;&#x2F;打印棋盘\nvoid DisplayBoard(char board[ROWS][COLS], int row, int col);\n\n&#x2F;&#x2F;设置雷\nvoid SetMine(char mine[ROWS][COLS], int row, int col);\n\n&#x2F;&#x2F;排雷\nvoid FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col);</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，这个游戏的实现并不困难，主要是实现每个功能的思路<br>每个函数都不止一种写法<br>比如检测一个坐标附近的八个坐标是否有雷的函数，那是我目前能想到的最好的一个方法了，之前也尝试过八个if，或者嵌套for，但是感觉还是这种最好。<br><br>这篇博客到此就结束了，有任何问题可以评论，项目已经开源在<a href=\"https://github.com/KaSock/Minesweeper\" target=\"_blank\">Github</a>上了。</p>\n","feature":true,"text":"记录一下利用C语言写的扫雷小游戏，小白都能看懂的记录博客 算是写的第二个小游戏了，第一个是三子棋小游戏 之前写三子棋的时候还没搭建这个博客，所以没来得及记录思路 本文可能会有大量文字和代码块，其次笔者文笔水平也不高，请谨慎观看！ \"More haste, less speed\" ...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"文章","slug":"文章","count":2,"path":"api/categories/文章.json"}],"tags":[{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">框架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%B8%E6%88%8F%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">游戏逻辑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B8%B8%E6%88%8F%E5%AE%9E%E7%8E%B0-9-9%E6%89%AB%E9%9B%B7\"><span class=\"toc-text\">游戏实现(9*9扫雷)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E7%BB%98%E5%88%B6%E6%B8%B8%E6%88%8F%E6%B8%B8%E6%88%8F%E8%8F%9C%E5%8D%95\"><span class=\"toc-text\">一、绘制游戏游戏菜单</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%9E%E7%8E%B0%E6%B8%B8%E6%88%8F%E5%9F%BA%E6%9C%AC%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">1.实现游戏基本运行流程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%BB%98%E5%88%B6%E6%B8%B8%E6%88%8F%E8%8F%9C%E5%8D%95\"><span class=\"toc-text\">2.绘制游戏菜单</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%AE%9E%E7%8E%B0%E6%B8%B8%E6%88%8F%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">二、实现游戏功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89%E6%A3%8B%E7%9B%98%E7%9A%84%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">1.定义棋盘的大小</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%A3%8B%E7%9B%98\"><span class=\"toc-text\">2.初始化棋盘</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%98%BE%E7%A4%BA%E6%A3%8B%E7%9B%98\"><span class=\"toc-text\">3.显示棋盘</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%AE%BE%E7%BD%AE%E9%9B%B7\"><span class=\"toc-text\">4.设置雷</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E6%8E%92%E6%9F%A5%E9%9B%B7\"><span class=\"toc-text\">5.排查雷</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E6%8B%BC%E6%8E%A5%E6%B8%B8%E6%88%8F%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">三、拼接游戏功能</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"KaSock","slug":"blog-author","avatar":"https://kasock.github.io/about/56071624.png","link":"https://github.com/KaSock","description":"一个自学各种语言的学者","socials":{"github":"https://github.com/KaSock","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Arcaea破解版v3.12","uid":"9587744b030fd9730b7355dceb5c2274","slug":"ArcHack","date":"2022-05-25T03:32:10.000Z","updated":"2022-07-13T10:18:22.700Z","comments":true,"path":"api/articles/ArcHack.json","keywords":null,"cover":"http://i.17173cdn.com/0561y4/YWxqaGBf/gamebase/game-cover-horizontal/BHcDrfbmCgqBevp.jpg","text":"《Arcaea》（韵律源点）是lowiro开发的一款三维立体音乐游戏，当前位于iOS平台、Android平台和Nintendo Switch平台。游戏的移动版发布于2017年3月9日，NS版已于2021年5月18日上线。游戏以独特的三维游戏模式知名，带有搭档系统且部分搭档拥有其个...","link":"","photos":[],"count_time":{"symbolsCount":513,"symbolsTime":"1 mins."},"categories":[{"name":"手机软件","slug":"手机软件","count":1,"path":"api/categories/手机软件.json"}],"tags":[{"name":"破解","slug":"破解","count":1,"path":"api/tags/破解.json"}],"author":{"name":"KaSock","slug":"blog-author","avatar":"https://kasock.github.io/about/56071624.png","link":"https://github.com/KaSock","description":"一个自学各种语言的学者","socials":{"github":"https://github.com/KaSock","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}